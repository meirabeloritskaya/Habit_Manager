name: Django CI/CD

on: [push, pull_request]

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate .env file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DJANGO_ENV=production" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "POSTGRES_HOST=db" >> .env
          echo "DEBUG=False" >> .env
          echo "RENDER_DEPLOY_HOOK=${{ secrets.RENDER_DEPLOY_HOOK }}" >> .env
          echo "STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }}" >> .env
          echo "STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" >> .env
          echo "TELEGRAM_URL=${{ secrets.TELEGRAM_URL }}" >> .env

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate .env file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DJANGO_ENV=production" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "POSTGRES_HOST=db" >> .env
          echo "DEBUG=False" >> .env

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          sudo service postgresql start
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';"
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.POSTGRES_DB }};"
          sudo -u postgres psql -c "CREATE ROLE runner WITH LOGIN PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.POSTGRES_DB }} TO runner;"
          sudo -u postgres psql -c "GRANT CREATE ON SCHEMA public TO runner;"

      - name: Run Tests
        run: python manage.py test

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [setup, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate .env file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DJANGO_ENV=production" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "POSTGRES_HOST=db" >> .env
          echo "DEBUG=False" >> .env

      - name: Prune Docker cache
        run: |
          docker builder prune -af
          docker image prune -af

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login --username "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker compose build

      - name: Push Docker Image
        run: docker compose push

      - name: Deploy to Render
        run: |
          echo "Deploying to Render"
          curl -X POST $RENDER_DEPLOY_HOOK
